CREATE OR REPLACE PACKAGE BODY HHS_HR.EHRP_REF_DATA_PKS AS

----------------------------------------------------------------------------------------------------------------------------------------------------------------------
--THIS PACKAGE WILL HANDLE PULLING AND POPULATING REF DATA TABLES, IT DOESN'T NOT SUPPORT UPDATE, LOCAL TABLE ARE REFRESHED THEN INSERT NEW RECORDS NIGHTLY.
----------------------------------------------------------------------------------------------------------------------------------------------------------------------

--======================================================
--  - - -   - - - - - - - - - - - - - - - - - - - - - - 

--GLOBAL VARIABLES

--- -  -  -- - - - - - - - - - - - - - - - - - - - - - -
--======================================================
	GCV_LIMIT               CONSTANT    NUMBER(10)      := 1000;

--======================================================
-- - - -- - - - - - - - - - - - - - - - - - - - - - - -

--CURSORS and TYPES

-- - - - - - - - - - - - - - - - - - - - - - - - - - - -
--======================================================

--------------------------------------------------------
--CURSOR: CUR_PS_DEPT
--DESCRIPTION: Fetches records from the EHRP PS_DEPT_TBL table 
--------------------------------------------------------
CURSOR CUR_PS_DEPT
IS
	SELECT
		SETID
		, DEPTID--ADMIN_CODE
		, EFFDT
		, EFF_STATUS
		, DESCR
		, DESCRSHORT
		, COMPANY
		, SETID_LOCATION
		, LOCATION
		, TAX_LOCATION_CD
		, MANAGER_ID
		, MANAGER_POSN
		, BUDGET_YR_END_DT
		, BUDGET_LVL
		, GL_EXPENSE
		, EEO4_FUNCTION
		, CAN_IND_SECTOR
		, ACCIDENT_INS
		, SI_ACCIDENT_NUM
		, HAZARD
		, ESTABID
		, RISKCD
		, GRADE
		, GVT_DESCR40
		, GVT_SUB_AGENCY
		, GVT_PAR_LINE2
		, GVT_PAR_LINE3
		, GVT_PAR_LINE4
		, GVT_PAR_LINE5
		, GVT_PAR_DESCR2
		, GVT_PAR_DESCR3
		, GVT_PAR_DESCR4
		, GVT_PAR_DESCR5
		, FTE_EDIT_INDC
		, DEPT_TENURE_FLG
		, TL_DISTRIB_INFO
		, USE_BUDGETS
		, USE_ENCUMBRANCES
		, USE_DISTRIBUTION
		, BUDGET_DEPTID
		, HP_STATS_DEPT_CD
		, HP_STATS_FACULTY
		, MANAGER_NAME
		, ACCOUNTING_OWNER
		, COUNTRY_GRP
		, CLASS_UNIT_NZL
		, ORG_UNIT_AUS
		, WORK_SECTOR_AUS
		, APS_AGENT_CD_AUS
		, IND_COMMITTEE_BEL
		, NACE_CD_BEL
	FROM EHRP.PS_DEPT_TBL@BIIS_DBLINK;

	TYPE TYP_PS_DEPT IS TABLE OF CUR_PS_DEPT%ROWTYPE
		INDEX BY PLS_INTEGER;

	PS_DEPARTMENTS TYP_PS_DEPT;

--------------------------------------------------------
--CURSOR: CUR_HE_RECRUIT
--DESCRIPTION: Fetches records from the 
--EHRP PS_HE_RECRUIT_EWIT table
--------------------------------------------------------
CURSOR CUR_HE_RECRUIT
IS
	SELECT
		HRS_JOB_OPENING_ID
		, HE_COMP_ALLOWANCE
		, HE_DENTIST_PAY
		, HE_NON_STANDARD_PA
		, HE_POSITION_DESCR
		, HE_RECRUIT_INCENT
		, HE_RELOCATIONBONUS
		, ACCT_CD
	FROM EHRP.PS_HE_RECRUIT_EWIT@BIIS_DBLINK;

	TYPE TYP_HE_RECRUIT IS TABLE OF CUR_HE_RECRUIT%ROWTYPE 
		INDEX BY PLS_INTEGER;

	HE_RECRUITS TYP_HE_RECRUIT;

--------------------------------------------------------
--CURSOR: CUR_HRS_JO_LOC
--DESCRIPTION: Fetches records from the 
--EHRP PS_HRS_JO_LOC table
--------------------------------------------------------
CURSOR CUR_HRS_JO_LOC
IS
	SELECT
		HRS_JOB_OPENING_ID
		, LOCATION
		, OPENINGS_TARGET
		, HRS_JO_PRM_LOC_FLG
		, HRS_ROW_ADD_DTTM
		, HRS_ROW_ADD_OPRID
		, HRS_ROW_UPD_DTTM
		, HRS_ROW_UPD_OPRID
	FROM EHRP.PS_HRS_JO_LOC@BIIS_DBLINK;

	TYPE TYP_HRS_JO_LOC IS TABLE OF CUR_HRS_JO_LOC%ROWTYPE
		INDEX BY PLS_INTEGER;

	HRS_JO_LOCS TYP_HRS_JO_LOC;

--------------------------------------------------------
--CURSOR: CUR_HRS_JO_NAME
--DESCRIPTION: Fetches records from the 
--EHRP PS_HRS_JO_NAME table
--------------------------------------------------------
CURSOR CUR_HRS_JO_NAME
IS
	SELECT
		HRS_JOB_OPENING_ID
		, SEQUENCE_NBR
		, NAME
		, HRS_ROW_ADD_DTTM
		, HRS_ROW_ADD_OPRID
		, HRS_ROW_UPD_DTTM
		, HRS_ROW_UPD_OPRID
	FROM EHRP.PS_HRS_JO_NAME@BIIS_DBLINK;

	TYPE TYP_HRS_JO_NAME IS TABLE OF CUR_HRS_JO_NAME%ROWTYPE
		INDEX BY PLS_INTEGER;

	HRS_JO_NAMES TYP_HRS_JO_NAME;

--------------------------------------------------------
--CURSOR: CUR_HRS_JO_POSN
--DESCRIPTION: Fetches records from the 
--EHRP PS_HRS_JO_POSN table
--------------------------------------------------------
CURSOR CUR_HRS_JO_POSN
IS
	SELECT
		HRS_JOB_OPENING_ID
		, POSITION_NBR
		, HRS_JO_PRM_PSN_FLG
		, HRS_ROW_ADD_DTTM
		, HRS_ROW_ADD_OPRID
		, HRS_ROW_UPD_DTTM
		, HRS_ROW_UPD_OPRID
	FROM EHRP.PS_HRS_JO_POSN@BIIS_DBLINK;

	TYPE TYP_HRS_JO_POSN IS TABLE OF CUR_HRS_JO_POSN%ROWTYPE
		INDEX BY PLS_INTEGER;

	HRS_JO_POSNS TYP_HRS_JO_POSN;

--------------------------------------------------------
--CURSOR: CUR_HRS_JO_RPL
--DESCRIPTION: Fetches records from the 
--EHRP PS_HRS_JO_RPL table
--------------------------------------------------------
CURSOR CUR_HRS_JO_RPL
IS
	SELECT
		HRS_JOB_OPENING_ID
		, EMPLID
		, HE_VACATED_DT
		, HRS_ROW_ADD_DTTM
		, HRS_ROW_ADD_OPRID
		, HRS_ROW_UPD_DTTM
		, HRS_ROW_UPD_OPRID
	FROM EHRP.PS_HRS_JO_RPL@BIIS_DBLINK;

	TYPE TYP_HRS_JO_RPL IS TABLE OF CUR_HRS_JO_RPL%ROWTYPE
		INDEX BY PLS_INTEGER;

	HRS_JO_RPLS  TYP_HRS_JO_RPL;

--------------------------------------------------------
--CURSOR: CUR_HRS_JO_RQMT
--DESCRIPTION: Fetches records from the 
--EHRP PS_HRS_JO_RQMT table
--------------------------------------------------------
CURSOR CUR_HRS_JO_RQMT
IS
	SELECT
		HRS_JOB_OPENING_ID
		, HRS_JO_RQMT_SEQ
		, JOBCODE
		, HRS_JO_PRM_JCD_FLG
		, GVT_NUM_APPS_CONS
		, GVT_RQSN_CERT_NBR
		, GVT_RQSN_CERT_SRC
		, GVT_RQSN_CERT_STS
		, DT_DUE
		, DT_ISSUED
		, DT_RECVD
		, DT_REQUESTED
		, DT_RETURNED
		, GVT_DT_EXTENDED
		, GVT_DT_RET_FRM_SO
		, GVT_DT_SENT_TO_SO
		, REG_REGION
		, FULL_PART_TIME
		, REG_TEMP
		, BEGIN_DT
		, END_DT
		, STD_HOURS
		, STD_HRS_FREQUENCY
		, SHIFT
		, HRS_JO_MIN_RT
		, HRS_JO_MAX_RT
		, PAY_FREQ_ABBRV
		, CURRENCY_CD
		, SAL_ADMIN_PLAN
		, GRADE_FROM
		, GRADE_TO
		, STEP_FROM
		, STEP_TO
		, HRS_TRAVEL_PERCENT
		, MANAGER_LEVEL
		, FLSA_STATUS
		, GVT_SUMMER_APPT
		, GVT_NTE_DATE
		, GVT_NTE_DAYS
		, GVT_LEO_POSITION
		, GVT_POSN_SENS_CD
		, GVT_TYPE_OF_APPT
		, HRS_ROW_ADD_DTTM
		, HRS_ROW_ADD_OPRID
		, HRS_ROW_UPD_DTTM
		, HRS_ROW_UPD_OPRID
	FROM EHRP.PS_HRS_JO_RQMT@BIIS_DBLINK;

	TYPE TYP_HRS_JO_RQMT IS TABLE OF CUR_HRS_JO_RQMT%ROWTYPE
		INDEX BY PLS_INTEGER;

	HRS_JO_RQMTS TYP_HRS_JO_RQMT;

--------------------------------------------------------
--CURSOR: CUR_HRS_JOB_OPENING
--DESCRIPTION: Fetches records from the 
--EHRP PS_HRS_JOB_OPENING table
--------------------------------------------------------
CURSOR CUR_HRS_JOB_OPENING
IS
	SELECT
		HRS_JOB_OPENING_ID
		, HRS_RCRT_TMPL_ID
		, HRS_JO_TYPE
		, REFERRAL_PGM_ID
		, ORIGINATOR_ID
		, MANAGER_ID
		, RECRUITER_ID
		, GVT_SEL_OFFICIAL
		, OPEN_DT
		, CLOSE_DT
		, STATUS_CODE
		, STATUS_REASON
		, STATUS_DT
		, HRS_OPENING_LIMIT
		, OPENINGS_CNT
		, OPENINGS_TARGET
		, HOT_JOB
		, BUSINESS_UNIT
		, SETID_DEPT
		, DEPTID
		, COMPANY
		, HRS_PRM_JOBCODE
		, HRS_PRM_POSITION
		, HRS_PRM_LOCATION
		, HRS_PRM_LOC_AREA
		, HRS_PRM_PST_TITLE
		, DESIRED_START_DT
		, WC_COUNCIL_ID
		, ENCUMB_DT_INDC
		, PROJECTED_FILL_DT
		, AUTHORIZATION_DT
		, ESTABID
		, COUNTRY
		, CITIZENSHIP_STATUS
		, MIN_AGE
		, MAX_AGE
		, SEX
		, HRS_CONTACT_ID
		, GVT_STAFF_SPCLST
		, GVT_CONSIDER_AREA
		, GVT_DRAFT_STATUS
		, HRS_G_JO_TYPE
		, JOB_FAMILY
		, HRS_ROW_ADD_DTTM
		, HRS_ROW_ADD_OPRID
		, HRS_ROW_UPD_DTTM
		, HRS_ROW_UPD_OPRID
		, GVT_RECR_OFFICE
		, HE_APPROVALO_OPRID
		, HE_COMMENTS
	FROM EHRP.PS_HRS_JOB_OPENING@BIIS_DBLINK;

	TYPE TYP_HRS_JOB_OPENING IS TABLE OF CUR_HRS_JOB_OPENING%ROWTYPE
		INDEX BY PLS_INTEGER;

	HRS_JOB_OPENINGS TYP_HRS_JOB_OPENING;

--------------------------------------------------------
--CURSOR: CUR_PS_JOBCODE
--DESCRIPTION: Fetches records from the 
--EHRP PS_JOBCODE_TBL table
--------------------------------------------------------
CURSOR CUR_PS_JOBCODE
IS
	SELECT
		SETID
		, JOBCODE
		, EFFDT
		, EFF_STATUS
		, DESCR
		, DESCRSHORT
		, JOB_FUNCTION
		, SETID_SALARY
		, SAL_ADMIN_PLAN
		, GRADE
		, STEP
		, MANAGER_LEVEL
		, SURVEY_SALARY
		, SURVEY_JOB_CODE
		, UNION_CD
		, RETRO_RATE
		, RETRO_PERCENT
		, CURRENCY_CD
		, STD_HOURS
		, STD_HRS_FREQUENCY
		, COMP_FREQUENCY
		, WORKERS_COMP_CD
		, JOB_FAMILY
		, JOB_KNOWHOW_POINTS
		, JOB_ACCNTAB_POINTS
		, JOB_PROBSLV_POINTS
		, JOB_POINTS_TOTAL
		, JOB_KNOWHOW_PCT
		, JOB_ACCNTAB_PCT
		, JOB_PROBSLV_PCT
		, REG_TEMP
		, DIRECTLY_TIPPED
		, MED_CHKUP_REQ
		, FLSA_STATUS
		, EEO1CODE
		, EEO4CODE
		, EEO5CODE
		, EEO6CODE
		, EEO_JOB_GROUP
		, US_SOC_CD
		, IPEDSSCODE
		, US_OCC_CD
		, CAN_PAYEQ_JOB_CLS
		, CAN_NOC_CD
		, SEASONAL
		, BPS_ACTIVITY_CD
		, FUNCTION_CD
		, BA_CD
		, TECHNICAL
		, MED_SURV_REQ
		, EMP_CATEGRY_FRA
		, ACTIVITY_TYPE_FRA
		, INSEE_CD_FRA
		, JOB_CTG_FRA_CD
		, UK_SOC_CD
		, GVT_PAY_PLAN
		, GVT_OCC_SERIES
		, TRN_PROGRAM
		, COMPANY
		, GVT_FUNC_CLASS
		, GVT_POSN_TITLE_CD
		, GVT_OFFICIAL_DESCR
		, GVT_ORG_TTL_CD
		, GVT_ORG_TTL_DESCR
		, GVT_PAY_BASIS
		, GVT_SUB_AGENCY
		, GVT_POI
		, GVT_PAREN_TITLE
		, GVT_OPM_CERT_NBR
		, GVT_POSN_CLASS_STD
		, GVT_POSN_SENS_CD
		, GVT_IA_ACTIONS
		, GVT_EXEC_FIN_DISCL
		, GVT_EMP_FIN_INT
		, GVT_PATCOB_CD
		, GVT_CLS_STANDARD
		, GVT_CLASSIFIER_ID
		, GVT_DT_CLASSIFIED
		, BARG_UNIT
		, GVT_FUND_SOURCE
		, GVT_LEO_POSITION
		, GVT_PERF_PLAN
		, GVT_TARGET_GRADE
		, GVT_PI_UPD_IND
		, ENCUMBER_INDC
		, POSN_MGMT_INDC
		, EG_ACADEMIC_RANK
		, EG_GROUP
		, HP_STATS_DUTIES
		, HP_STATS_RPT_FLAG
		, ENCUMB_SAL_OPTN
		, ENCUMB_SAL_AMT
		, INAIL_CODE
		, ASCO_CD_AUS
		, PKG_TEMPLATE_ID
		, PKG_RULE_ID
		, FUNCTION_AUS
		, ANN_CNTACT_HRS_AUS
		, TEACH_WEEKS_AUS
		, CASUAL_TYPE_AUS
		, WORK_DAY_HOURS
		, FA_PAY_PROGRAM
		, ELECTION_GROUP
		, LABOR_AGREEMENT
		, FP_PROF_CATG
		, FP_JOB_FMLY
		, FP_OFF_COLAG
		, FP_MATRIX_TYP
		, FP_MATRIX_CD
		, FP_BUSINESS_CD
		, FP_JOBCD_ACC
		, FP_ATCH_AREA
		, FP_JOB_TYP
		, FP_AUTO_RATFY
		, LAST_UPDATE_DATE
		, REG_REGION
		, SAL_RANGE_MIN_RATE
		, SAL_RANGE_MID_RATE
		, SAL_RANGE_MAX_RATE
		, SAL_RANGE_CURRENCY
		, SAL_RANGE_FREQ
		, JOB_PROFILE_ID
		, DESCRLONG
	FROM EHRP.PS_JOBCODE_TBL@BIIS_DBLINK;

	TYPE TYP_JOBCODE IS TABLE OF CUR_PS_JOBCODE%ROWTYPE
		INDEX BY PLS_INTEGER;

	PS_JOBCODES TYP_JOBCODE;

--------------------------------------------------------
--CURSOR: CUR_PS_POSITION_DATA
--DESCRIPTION: Fetches records from the 
--EHRP PS_POSITION_DATA table
--------------------------------------------------------
CURSOR CUR_PS_POSITION_DATA
IS
	SELECT
		POSITION_NBR
		, EFFDT
		, EFF_STATUS
		, DESCR
		, DESCRSHORT
		, ACTION
		, ACTION_REASON
		, ACTION_DT
		, BUSINESS_UNIT
		, DEPTID --ADMIN_CODE
		, JOBCODE
		, POSN_STATUS
		, STATUS_DT
		, BUDGETED_POSN
		, CONFIDENTIAL_POSN
		, KEY_POSITION
		, JOB_SHARE
		, MAX_HEAD_COUNT
		, UPDATE_INCUMBENTS
		, REPORTS_TO
		, REPORT_DOTTED_LINE
		, ORGCODE
		, ORGCODE_FLAG
		, LOCATION
		, MAIL_DROP
		, COUNTRY_CODE
		, PHONE
		, COMPANY
		, STD_HOURS
		, STD_HRS_FREQUENCY
		, UNION_CD
		, SHIFT
		, REG_TEMP
		, FULL_PART_TIME
		, MON_HRS
		, TUES_HRS
		, WED_HRS
		, THURS_HRS
		, FRI_HRS
		, SAT_HRS
		, SUN_HRS
		, BARG_UNIT
		, GVT_PAY_PLAN
		, SEASONAL
		, TRN_PROGRAM
		, LANGUAGE_SKILL
		, MANAGER_LEVEL
		, FLSA_STATUS
		, GVT_WIP_STATUS
		, GVT_STATUS_TYPE
		, GVT_WORK_SCHED
		, GVT_SUB_AGENCY
		, GVT_DT_POSN_ESTAB
		, GVT_COMP_AREA
		, GVT_COMP_LEVEL
		, GVT_ORG_TTL_CD
		, GVT_ORG_TTL_DESCR
		, GVT_DRUG_TEST_REQ
		, GVT_FUND_SOURCE
		, GVT_INTEL_POSN
		, GVT_LEO_POSITION
		, GVT_MOB_POSN_IND
		, GVT_PROC_INTEG_PSN
		, GVT_PRESIDENT_APPT
		, GVT_NTE_DATE
		, GVT_OCC_SERIES
		, GVT_PAR_NBR
		, GVT_PAREN_TITLE
		, GVT_PERF_PLAN
		, GVT_POI
		, GVT_POSN_LOC
		, GVT_POSN_OCCUPIED
		, GVT_POSN_SENS_CD
		, SECURITY_CLEARANCE
		, GVT_STAFF_LINE
		, GVT_LAST_AUDIT_DT
		, GVT_AUDITED_BY_ID
		, GVT_OBLIGATED_TO
		, GVT_OBLIG_EXPIR_DT
		, GVT_TARGET_GRADE
		, GVT_PI_UPD_IND
		, GVT_EXEC_FIN_DISCL
		, GVT_EMP_FIN_INT
		, REG_REGION
		, CLASS_INDC
		, ENCUMBER_INDC
		, FTE
		, POSITION_POOL_ID
		, EG_ACADEMIC_RANK
		, EG_GROUP
		, ENCUMB_SAL_OPTN
		, ENCUMB_SAL_AMT
		, HEALTH_CERTIFICATE
		, SIGN_AUTHORITY
		, ADDS_TO_FTE_ACTUAL
		, SAL_ADMIN_PLAN
		, GRADE
		, GRADE_FROM
		, STEP_FROM
		, GRADE_TO
		, STEP_TO
		, STEP
		, JOB_PROFILE_ID
		, PKG_TEMPLATE_ID
		, PKG_RULE_ID
		, SUPV_LVL_ID
		, INCLUDE_SALPLN_FLG
		, POSN_DATA_MESSAGE
		, HE_MED_OFF_IND
		, HE_SE_TYPE
		, HE_TERM_ID
		, HE_POS_SUBJECT_TO
		, HE_ACTIVITY_FUNC
		, HE_REASON_CODE
		, FUNCTION_CD
		, DESCRLONG
	FROM EHRP.PS_POSITION_DATA@BIIS_DBLINK;

	TYPE TYP_PS_POSITION_DATA IS TABLE OF CUR_PS_POSITION_DATA%ROWTYPE
		INDEX BY PLS_INTEGER;

	PS_POSITIONS TYP_PS_POSITION_DATA;

--------------------------------------------------------
--CURSOR: CUR_PS_SAL_GRADE
--DESCRIPTION: Fetches records from the 
--EHRP PS_SAL_GRADE_TBL table
--------------------------------------------------------
CURSOR CUR_PS_SAL_GRADE
IS
	SELECT
		SETID
		, SAL_ADMIN_PLAN
		, GRADE
		, EFFDT
		, EFF_STATUS
		, DESCR
		, DESCRSHORT
		, SALARY_MATRIX_CD
		, CURRENCY_CD
		, MIN_RT_HOURLY
		, MID_RT_HOURLY
		, MAX_RT_HOURLY
		, MIN_RT_MONTHLY
		, MID_RT_MONTHLY
		, MAX_RT_MONTHLY
		, MIN_RT_ANNUAL
		, MID_RT_ANNUAL
		, MAX_RT_ANNUAL
		, STEP_INCREM_TYPE
		, STEP_INCREM_ACCUM
		, MIN_RT_DAILY
		, MID_RT_DAILY
		, MAX_RT_DAILY
		, LABOR_AGREEMENT
		, EMPL_CTG
		, EMPL_CTG_L1
		, EMPL_CTG_L2
		, GVT_MAX_RT_BIWK
		, GVT_MID_RT_BIWK
		, GVT_MIN_RT_BIWK
		, GRADE_TITLE_JPN
		, MIN_YRS_GRADE
		, MAX_YRS_GRADE
		, MIN_GRD_AGE
		, REVIEW_COUNT
		, ELIGIBILITY_POINTS
		, REG_REGION
		, JOB_PROFILE_ID
	FROM EHRP.PS_SAL_GRADE_TBL@BIIS_DBLINK;

	TYPE TYP_SAL_GRADE IS TABLE OF CUR_PS_SAL_GRADE%ROWTYPE
		INDEX BY PLS_INTEGER;

	PS_SAL_GRADES TYP_SAL_GRADE;

--------------------------------------------------------
--CURSOR: CUR_PS_HRS_LOC
--DESCRIPTION: Fetches records from the EHRP PS_HRS_LOCATION_I
-- view 
--------------------------------------------------------
CURSOR CUR_PS_HRS_LOC
IS
	SELECT
		SETID
		, LOCATION
		, EFFDT
		, COUNTRY
		, STATE
		, DESCR
		, DESCRSHORT
	FROM EHRP.PS_HRS_LOCATION_I@BIIS_DBLINK;

	TYPE TYPE_HRS_LOC IS TABLE OF CUR_PS_HRS_LOC%ROWTYPE
		INDEX BY PLS_INTEGER;

	PS_HRS_LOC TYPE_HRS_LOC;

--------------------------------------------------------
--CURSOR: CUR_PERSONAL_VW
--DESCRIPTION: Fetches records from the EHRP PS_PERSONAL_DATA_VW
-- view 
--------------------------------------------------------
CURSOR CUR_PERSONAL_VW
IS
	SELECT
		EMPLID
		, COUNTRY_NM_FORMAT
		, NAME
		, NAME_INITIALS
		, NAME_PREFIX
		, NAME_SUFFIX
		, NAME_ROYAL_PREFIX
		, NAME_ROYAL_SUFFIX
		, NAME_TITLE
		, LAST_NAME_SRCH
		, FIRST_NAME_SRCH
		, LAST_NAME
		, FIRST_NAME
		, MIDDLE_NAME
		, SECOND_LAST_NAME
		, SECOND_LAST_SRCH
		, NAME_AC
		, PREF_FIRST_NAME
		, PARTNER_LAST_NAME
		, PARTNER_ROY_PREFIX
		, LAST_NAME_PREF_NLD
		, NAME_DISPLAY
		, NAME_FORMAL
		, CAMPUS_ID
		, COUNTRY
		, ADDRESS1
		, ADDRESS2
		, ADDRESS3
		, ADDRESS4
		, CITY
		, NUM1
		, NUM2
		, HOUSE_TYPE
		, ADDR_FIELD1
		, ADDR_FIELD2
		, ADDR_FIELD3
		, COUNTY
		, STATE
		, POSTAL
		, GEO_CODE
		, IN_CITY_LIMIT
		, COUNTRY_OTHER
		, ADDRESS1_OTHER
		, ADDRESS2_OTHER
		, ADDRESS3_OTHER
		, ADDRESS4_OTHER
		, CITY_OTHER
		, COUNTY_OTHER
		, STATE_OTHER
		, POSTAL_OTHER
		, NUM1_OTHER
		, NUM2_OTHER
		, HOUSE_TYPE_OTHER
		, ADDR_FIELD1_OTHER
		, ADDR_FIELD2_OTHER
		, ADDR_FIELD3_OTHER
		, IN_CITY_LMT_OTHER
		, GEO_CODE_OTHER
		, COUNTRY_CODE
		, PHONE
		, EXTENSION
		, VA_BENEFIT
		, DEATH_CERTIF_NBR
		, FERPA
		, PLACE_OF_DEATH
		, US_WORK_ELIGIBILTY
		, MILITARY_STATUS
		, CITIZEN_PROOF1
		, CITIZEN_PROOF2
		, MEDICARE_ENTLD_DT
		, HONSEKI_JPN
		, MILITARY_STAT_ITA
		, MILITARY_TYPE_ITA
		, MILITARY_RANK_ITA
		, MILITARY_END_ITA
		, ENTRY_DT_FRA
		, MILIT_SITUATN_FRA
		, CPAMID
		, BILINGUALISM_CODE
		, HEALTH_CARE_NBR
		, HEALTH_CARE_STATE
		, MILIT_SITUATN_ESP
		, SOC_SEC_AFF_DT
		, MILITARY_STAT_GER
		, EXPCTD_MILITARY_DT
		, HR_RESPONSIBLE_ID
		, SMOKER
		, SMOKER_DT
		, GVT_CRED_MIL_SVCE
		, GVT_MILITARY_COMP
		, GVT_MIL_GRADE
		, GVT_MIL_RESRVE_CAT
		, GVT_MIL_SEP_RET
		, GVT_MIL_SVCE_END
		, GVT_MIL_SVCE_START
		, GVT_MIL_VERIFY
		, GVT_PAR_NBR_LAST
		, GVT_UNIF_SVC_CTR
		, GVT_VET_PREF_APPT
		, GVT_VET_PREF_RIF
		, GVT_CHANGE_FLAG
		, GVT_DRAFT_STATUS
		, GVT_YR_ATTAINED
		, GRADE
		, SAL_ADMIN_PLAN
		, GVT_CURR_AGCY_EMPL
		, GVT_CURR_FED_EMPL
		, GVT_HIGH_PAY_PLAN
		, GVT_HIGH_GRADE
		, GVT_PREV_AGCY_EMPL
		, GVT_PREV_FED_EMPL
		, GVT_SEP_INCENTIVE
		, GVT_SEP_INCENT_DT
		, GVT_TENURE
		, GVT_PAY_PLAN
		, BARG_UNIT
		, LASTUPDDTTM
		, BIRTHPLACE
		, BIRTHCOUNTRY
		, BIRTHSTATE
		, HIGHEST_EDUC_LVL
		, FT_STUDENT
		, LANG_CD
		, ALTER_EMPLID
		, ADDRESS1_AC
		, ADDRESS2_AC
		, ADDRESS3_AC
		, CITY_AC
		, HE_ERI
	FROM EHRP.PS_PERSONAL_DATA_VW@BIIS_DBLINK;

	TYPE TYP_PERS_VW IS TABLE OF CUR_PERSONAL_VW%ROWTYPE
		INDEX BY PLS_INTEGER;

	PS_PERS_VW TYP_PERS_VW;


--------------------------------------------------------
--CURSOR: CUR_GVT_RQSN_JOBCD
--DESCRIPTION: Fetches records from the EHRP 
-- PS_GVT_RQSN_JOBCD table 
--------------------------------------------------------
CURSOR CUR_GVT_RQSN_JOBCD
IS
	SELECT
		JOB_REQ_NBR
		, JOBCODE
		, GVT_RQSN_WQL_SCORE
		, GVT_RQSN_BQL_SCORE
		, GVT_RQSN_SAL_FROM
		, GVT_RQSN_SAL_TO
		, PAY_FREQ_ABBRV
		, MANAGER_LEVEL
		, FLSA_STATUS
		, DESIRED_FULL_PART
		, DESIRED_SHIFT
		, STD_HOURS
		, DESIRED_REG_TEMP
		, GVT_SUMMER_APPT
		, GVT_NTE_DATE
		, GVT_NTE_DAYS
		, GVT_LEO_POSITION
		, GVT_POSN_SENS_CD
		, GVT_TRAVEL_PERCENT
		, GVT_TYPE_OF_APPT
		, GVT_PATCOB_CD
		, GVT_PAY_PLAN
		, GRADE
		, GVT_PRIMARY_JCODE
		, GVT_NUM_APPS_CONS
		, EDUCATION_LVL
		, GVT_REQUIRED
		, GVT_MQ_MET_SCORE
		, GVT_MQ_NMET_SCORE
		, GVT_MQ_PASS_RAN_FR
		, GVT_MQ_PASS_RAN_TO
		, GVT_MQ_FAIL_RAN_FR
		, GVT_MQ_FAIL_RAN_TO
		, GVT_PNL_SCORE_LMT
		, GVT_MQ_PNL_SCORE
		, GVT_TRANSMUT_SCORE
		, GVT_AUG_SCORE_LMT
		, GVT_PNL_AUG_SCORE
		, GVT_CONSIDER_AF
		, GVT_CONSIDER_VP
		, GVT_VP_SCORE_LMT
		, GVT_AUG_VP_SCORE
		, DT_DUE
		, DT_ISSUED
		, DT_RECVD
		, DT_REQUESTED
		, DT_RETURNED
		, GVT_CONSID_VP_COMP
		, GVT_CONSID_VP_NCMP
		, GVT_DT_EXTENDED
		, GVT_DT_RET_FRM_SO
		, GVT_DT_SENT_TO_SO
		, GVT_OCC_SERIES
		, GVT_RANK_COMP
		, GVT_RANK_COMP_CAT1
		, GVT_RANK_COMP_CAT2
		, GVT_RANK_COMP_CAT3
		, GVT_RANK_COMP_CAT4
		, GVT_RANK_COMP_TYP
		, GVT_RANK_JOBCODE
		, GVT_RANK_NCMP_CAT1
		, GVT_RANK_NCMP_CAT2
		, GVT_RANK_NCMP_CAT3
		, GVT_RANK_NCMP_CAT4
		, GVT_RANK_NCOMP_TYP
		, GVT_RANK_NONCOMP
		, GVT_RQSN_CERT_NBR
		, GVT_RQSN_CERT_SRC
		, GVT_RQSN_CERT_STS
		, GVT_TIE_BREAKER
		, GVT_APPLY_TIE
	FROM EHRP.PS_GVT_RQSN_JOBCD@BIIS_DBLINK;

	TYPE TYP_GVT_RQ_JC IS TABLE OF CUR_GVT_RQSN_JOBCD%ROWTYPE
		INDEX BY PLS_INTEGER;

	TBL_GVT_RQ_JC TYP_GVT_RQ_JC;


--------------------------------------------------------
--CURSOR: CUR_GVT_RQSN_POSN
--DESCRIPTION: Fetches records from the EHRP 
-- PS_GVT_RQSN_POSN table 
--------------------------------------------------------
CURSOR CUR_GVT_RQSN_POSN
IS
	SELECT
		JOB_REQ_NBR
		, POSITION_NBR
		, JOBCODE
		, GVT_RQSN_WQL_SCORE
		, GVT_RQSN_BQL_SCORE
		, GVT_PRIMARY_JCODE
	FROM EHRP.PS_GVT_RQSN_POSN@BIIS_DBLINK;

	TYPE TYP_GVT_RQ_POS IS TABLE OF CUR_GVT_RQSN_POSN%ROWTYPE
		INDEX BY PLS_INTEGER;

	TBL_GVT_RQ_POS TYP_GVT_RQ_POS;


--------------------------------------------------------
--CURSOR: CUR_HE_GVT_RQSN_PRT
--DESCRIPTION: Fetches records from the EHRP
-- PS_HE_GVT_RQSN_PRT table
--------------------------------------------------------
CURSOR CUR_HE_GVT_RQSN_PRT
IS
	SELECT
		OPRID
		, RUN_CNTL_ID
		, GVT_WIP_RECORD
		, JOB_REQ_NBR
		, GVT_PAR_CUR_STATUS
		, LOCATION
		, GVT_RECR_OFFICE
		, POSITION_NBR
		, JOBCODE
		, JOB_REQ_STATUS
		, GVT_RQSN_TYPE
		, GVT_RQSN_REASON
		, GVT_WIP_STATUS
		, GRADE
		, GVT_PAY_PLAN
		, GVT_OCC_SERIES
		, GVT_OFFICIAL_DESCR
		, GVT_DATE_WRK
	FROM EHRP.PS_HE_GVT_RQSN_PRT@BIIS_DBLINK;

	TYPE TYP_HE_GVT_RQ_PRT IS TABLE OF CUR_HE_GVT_RQSN_PRT%ROWTYPE
		INDEX BY PLS_INTEGER;

	TBL_HE_GVT_RQ_PRT TYP_HE_GVT_RQ_PRT;

--------------------------------------------------------
--CURSOR: CUR_JO_APPR_COMM
--DESCRIPTION: Fetches records from the EHRP
-- PS_HE_JO_APPR_COMM view
--------------------------------------------------------
CURSOR CUR_JO_APPR_COMM
IS
	SELECT
		HRS_JOB_OPENING_ID
		, AWTHREAD_ID
		, STEP_NBR
		, AWSTEP_STATUS
		, STATUS_DT
		, OPRID
		, EMPLID
		, COMMENTS
	FROM EHRP.PS_HE_JO_APPR_COMM@BIIS_DBLINK;

	TYPE TYP_JO_APPR_COMM IS TABLE OF CUR_JO_APPR_COMM%ROWTYPE
		INDEX BY PLS_INTEGER;

	TBL_JO_APPR_COMM TYP_JO_APPR_COMM;

--------------------------------------------------------
--CURSOR: CUR_OPR_DEFN
--DESCRIPTION: Fetches records from the EHRP
-- PSOPRDEFN
--------------------------------------------------------
CURSOR CUR_OPR_DEFN
IS
	SELECT
		OPRID
		, VERSION
		, OPRDEFNDESC
		, EMPLID
		, EMAILID
		, OPRCLASS
		, ROWSECCLASS
	FROM EHRP.PSOPRDEFN@BIIS_DBLINK;

	TYPE TYP_OPR_DEFN IS TABLE OF CUR_OPR_DEFN%ROWTYPE
		INDEX BY PLS_INTEGER;

	TBL_OPR_DEFN TYP_OPR_DEFN;


--------------------------------------------------------
--CURSOR: CUR_PS_GVT_EMPL
--DESCRIPTION: Fetches records from EHRP
-- PS_GVT_EMPLOYMENT
--------------------------------------------------------
CURSOR CUR_PS_GVT_EMPL
IS
	SELECT
		EMPLID
		, EMPL_RCD
		, EFFDT
		, EFFSEQ
		, BENEFIT_RCD_NBR
		, HOME_HOST_CLASS
		, HIRE_DT
		, REHIRE_DT
		, CMPNY_SENIORITY_DT
		, SERVICE_DT
		, PROF_EXPERIENCE_DT
		, LAST_VERIFICATN_DT
		, EXPECTED_RETURN_DT
		, TERMINATION_DT
		, LAST_DATE_WORKED
		, LAST_INCREASE_DT
		, OWN_5PERCENT_CO
		, BUSINESS_TITLE
		, REPORTS_TO
		, PROBATION_DT
		, SECURITY_CLEARANCE
		, DED_TAKEN
		, DED_SUBSET_ID
		, SETID
		, GVT_SCD_RETIRE
		, GVT_SCD_TSP
		, GVT_SCD_LEO
		, GVT_SCD_SEVPAY
		, GVT_SEVPAY_PRV_WKS
		, GVT_MAND_RET_DT
		, GVT_WGI_STATUS
		, GVT_INTRM_DAYS_WGI
		, GVT_NONPAY_NOA
		, GVT_NONPAY_HRS_WGI
		, GVT_NONPAY_HRS_SCD
		, GVT_NONPAY_HRS_TNR
		, GVT_NONPAY_HRS_PRB
		, GVT_TEMP_PRO_EXPIR
		, GVT_TEMP_PSN_EXPIR
		, GVT_DETAIL_EXPIRES
		, GVT_SABBATIC_EXPIR
		, GVT_RTND_GRADE_BEG
		, GVT_RTND_GRADE_EXP
		, GVT_NOA_CODE
		, GVT_CURR_APT_AUTH1
		, GVT_CURR_APT_AUTH2
		, GVT_APPT_EXPIR_DT
		, GVT_CNV_BEGIN_DATE
		, GVT_CAREER_CNV_DUE
		, GVT_CAREER_COND_DT
		, GVT_APPT_LIMIT_HRS
		, GVT_APPT_LIMIT_DYS
		, GVT_APPT_LIMIT_AMT
		, GVT_SUPV_PROB_DT
		, GVT_SES_PROB_DT
		, GVT_SEC_CLR_STATUS
		, GVT_CLRNCE_STAT_DT
		, GVT_ERN_PGM_PERM
		, GVT_OCC_SERS_PERM
		, GVT_GRADE_PERM
		, GVT_COMP_AREA_PERM
		, GVT_COMP_LVL_PERM
		, GVT_CHANGE_FLAG
		, GVT_SPEP
		, GVT_WGI_DUE_DATE
		, GVT_DT_LEI
		, GVT_FIN_DISCLOSURE
		, GVT_FIN_DISCL_DATE
		, GVT_TENURE
		, GVT_DETL_BARG_UNIT
		, GVT_DETL_UNION_CD
		, NEXT_REVIEW_DT
		, GVT_WELFARE_WK_CD
		, TENURE_ACCR_FLG
		, FTE_TENURE
		, EG_GROUP
		, FTE_FLX_SRVC
		, CONTRACT_LENGTH
		, APPOINT_END_DT
		, NEE_PROVIDER_ID
		, POSITION_PHONE
	FROM EHRP.PS_GVT_EMPLOYMENT@BIIS_DBLINK;

	TYPE TYP_PS_GVT_EMPL IS TABLE OF CUR_PS_GVT_EMPL%ROWTYPE
		INDEX BY PLS_INTEGER;

	TBL_PS_GVT_EMPL TYP_PS_GVT_EMPL;

--------------------------------------------------------
--CURSOR: CUR_PS_GVT_JOB
--DESCRIPTION: Fetches records from EHRP
-- PS_GVT_JOB
--------------------------------------------------------
CURSOR CUR_PS_GVT_JOB
IS
	SELECT
		EMPLID
		, EMPL_RCD
		, EFFDT
		, EFFSEQ
		, DEPTID
		, JOBCODE
		, POSITION_NBR
		, POSITION_OVERRIDE
		, POSN_CHANGE_RECORD
		, EMPL_STATUS
		, ACTION
		, ACTION_DT
		, ACTION_REASON
		, LOCATION
		, TAX_LOCATION_CD
		, JOB_ENTRY_DT
		, DEPT_ENTRY_DT
		, POSITION_ENTRY_DT
		, SHIFT
		, REG_TEMP
		, FULL_PART_TIME
		, COMPANY
		, PAYGROUP
		, BAS_GROUP_ID
		, ELIG_CONFIG1
		, ELIG_CONFIG2
		, ELIG_CONFIG3
		, ELIG_CONFIG4
		, ELIG_CONFIG5
		, ELIG_CONFIG6
		, ELIG_CONFIG7
		, ELIG_CONFIG8
		, ELIG_CONFIG9
		, BEN_STATUS
		, BAS_ACTION
		, COBRA_ACTION
		, EMPL_TYPE
		, HOLIDAY_SCHEDULE
		, STD_HOURS
		, STD_HRS_FREQUENCY
		, OFFICER_CD
		, EMPL_CLASS
		, SAL_ADMIN_PLAN
		, GRADE
		, GRADE_ENTRY_DT
		, STEP
		, STEP_ENTRY_DT
		, GL_PAY_TYPE
		, ACCT_CD
		, EARNS_DIST_TYPE
		, COMP_FREQUENCY
		, COMPRATE
		, CHANGE_AMT
		, CHANGE_PCT
		, ANNUAL_RT
		, MONTHLY_RT
		, DAILY_RT
		, HOURLY_RT
		, ANNL_BENEF_BASE_RT
		, SHIFT_RT
		, SHIFT_FACTOR
		, CURRENCY_CD
		, BUSINESS_UNIT
		, SETID_DEPT
		, SETID_JOBCODE
		, SETID_LOCATION
		, SETID_SALARY
		, REG_REGION
		, DIRECTLY_TIPPED
		, FLSA_STATUS
		, EEO_CLASS
		, FUNCTION_CD
		, TARIFF_GER
		, TARIFF_AREA_GER
		, PERFORM_GROUP_GER
		, LABOR_TYPE_GER
		, SPK_COMM_ID_GER
		, HOURLY_RT_FRA
		, ACCDNT_CD_FRA
		, VALUE_1_FRA
		, VALUE_2_FRA
		, VALUE_3_FRA
		, VALUE_4_FRA
		, VALUE_5_FRA
		, CTG_RATE
		, PAID_HOURS
		, PAID_FTE
		, PAID_HRS_FREQUENCY
		, GVT_EFFDT
		, GVT_EFFDT_PROPOSED
		, GVT_TRANS_NBR
		, GVT_TRANS_NBR_SEQ
		, GVT_WIP_STATUS
		, GVT_STATUS_TYPE
		, GVT_NOA_CODE
		, GVT_LEG_AUTH_1
		, GVT_PAR_AUTH_D1
		, GVT_PAR_AUTH_D1_2
		, GVT_LEG_AUTH_2
		, GVT_PAR_AUTH_D2
		, GVT_PAR_AUTH_D2_2
		, GVT_PAR_NTE_DATE
		, GVT_WORK_SCHED
		, GVT_SUB_AGENCY
		, GVT_ELIG_FEHB
		, GVT_FEHB_DT
		, GVT_PAY_RATE_DETER
		, GVT_STEP
		, GVT_RTND_PAY_PLAN
		, GVT_RTND_SAL_PLAN
		, GVT_RTND_GRADE
		, GVT_RTND_STEP
		, GVT_RTND_GVT_STEP
		, GVT_PAY_BASIS
		, GVT_COMPRATE
		, GVT_LOCALITY_ADJ
		, GVT_BIWEEKLY_RT
		, GVT_DAILY_RT
		, GVT_HRLY_RT_NO_LOC
		, GVT_DLY_RT_NO_LOC
		, GVT_BW_RT_NO_LOC
		, GVT_MNLY_RT_NO_LOC
		, GVT_ANNL_RT_NO_LOC
		, GVT_XFER_FROM_AGCY
		, GVT_XFER_TO_AGCY
		, GVT_RETIRE_PLAN
		, GVT_ANN_IND
		, GVT_FEGLI
		, GVT_FEGLI_LIVING
		, GVT_LIVING_AMT
		, GVT_ANNUITY_OFFSET
		, GVT_CSRS_FROZN_SVC
		, GVT_PREV_RET_COVRG
		, GVT_FERS_COVERAGE
		, GVT_TYPE_OF_APPT
		, GVT_POI
		, GVT_POSN_OCCUPIED
		, GVT_CONT_EMPLID
		, GVT_ROUTE_NEXT
		, GVT_CHANGE_FLAG
		, GVT_TSP_UPD_IND
		, GVT_PI_UPD_IND
		, GVT_SF52_NBR
		, GVT_S113G_CEILING
		, GVT_LEO_POSITION
		, GVT_ANNUIT_COM_DT
		, GVT_BASIC_LIFE_RED
		, GVT_DED_PRORT_DT
		, GVT_FEGLI_BASC_PCT
		, GVT_FEGLI_OPT_PCT
		, GVT_FEHB_PCT
		, GVT_RETRO_FLAG
		, GVT_RETRO_DED_FLAG
		, GVT_RETRO_JOB_FLAG
		, GVT_RETRO_BSE_FLAG
		, GVT_OTH_PAY_CHG
		, GVT_DETL_POSN_NBR
		, ANNL_BEN_BASE_OVRD
		, BENEFIT_PROGRAM
		, UPDATE_PAYROLL
		, GVT_PAY_PLAN
		, GVT_PAY_FLAG
		, GVT_NID_CHANGE
		, UNION_FULL_PART
		, UNION_POS
		, MATRICULA_NBR
		, SOC_SEC_RISK_CODE
		, UNION_FEE_AMOUNT
		, UNION_FEE_START_DT
		, UNION_FEE_END_DT
		, EXEMPT_JOB_LBR
		, EXEMPT_HOURS_MONTH
		, WRKS_CNCL_FUNCTION
		, INTERCTR_WRKS_CNCL
		, CURRENCY_CD1
		, PAY_UNION_FEE
		, UNION_CD
		, BARG_UNIT
		, UNION_SENIORITY_DT
		, ENTRY_DATE
		, LABOR_AGREEMENT
		, EMPL_CTG
		, EMPL_CTG_L1
		, EMPL_CTG_L2
		, SETID_LBR_AGRMNT
		, WPP_STOP_FLAG
		, LABOR_FACILITY_ID
		, LBR_FAC_ENTRY_DT
		, LAYOFF_EXEMPT_FLAG
		, LAYOFF_EXEMPT_RSN
		, GP_PAYGROUP
		, GP_DFLT_ELIG_GRP
		, GP_ELIG_GRP
		, GP_DFLT_CURRTTYP
		, CUR_RT_TYPE
		, GP_DFLT_EXRTDT
		, GP_ASOF_DT_EXG_RT
		, ADDS_TO_FTE_ACTUAL
		, CLASS_INDC
		, ENCUMB_OVERRIDE
		, FICA_STATUS_EE
		, FTE
		, PRORATE_CNT_AMT
		, PAY_SYSTEM_FLG
		, BORDER_WALKER
		, LUMP_SUM_PAY
		, CONTRACT_NUM
		, JOB_INDICATOR
		, WRKS_CNCL_ROLE_CHE
		, BENEFIT_SYSTEM
		, WORK_DAY_HOURS
		, SUPERVISOR_ID
		, REPORTS_TO
		, ESTABID
		, HE_NOA_EXT
		, HE_AL_CARRYOVER
		, HE_AL_ACCRUAL
		, HE_AL_RED_CRED
		, HE_AL_TOTAL
		, HE_AL_BALANCE
		, HE_SL_CARRYOVER
		, HE_SL_ACCRUAL
		, HE_SL_RED_CRED
		, HE_SL_TOTAL
		, HE_SL_BALANCE
		, HE_RES_LASTYR
		, HE_RES_TWOYRS
		, HE_RES_THREEYRS
		, HE_RES_BALANCE
		, HE_LUMP_HRS
		, HE_AWOP_SEP
		, HE_AWOP_WIGI
		, HE_REG_MILITARY
		, HE_SPC_MILITARY
		, HE_FROZEN_SL
		, HE_TSPA_PR_YR
		, HE_TSPA_SUB_YR
		, HE_UNOFF_AL
		, HE_UNOFF_SL
		, HE_TLTR_NO
		, HE_UDED_PAY_CD
		, HE_TSP_CANC_CD
		, HE_PP_UDED_AMT
		, HE_EMP_UDED_AMT
		, HE_GVT_UDED_AMT
		, HE_NO_TSP_PAYPER
	FROM EHRP.PS_GVT_JOB@BIIS_DBLINK;

	TYPE TYP_PS_GVT_JOB IS TABLE OF CUR_PS_GVT_JOB%ROWTYPE
		INDEX BY PLS_INTEGER;

	TBL_PS_GVT_JOB TYP_PS_GVT_JOB;

--------------------------------------------------------
--CURSOR: CUR_PS_EMPL_RVW
--DESCRIPTION: Fetches records from EHRP
-- PS_EMPLOYEE_REVIEW
--------------------------------------------------------
CURSOR CUR_PS_EMPL_RVW
IS
	SELECT
		EMPLID,
		, EMPL_RCD
		, EFFDT,
		, NEXT_REVIEW_DT
		, REVIEW_FROM_DT
		, REVIEW_THRU_DT
		, REVIEW_TYPE
		, RATING_SCALE
		, REVIEW_RATING
		, TOTAL_EE_AMOUNT
		, TOTAL_EE_PERCENT
		, TOTAL_EE_POINTS
		, TOTAL_EE_SAL_PTS
		, EMPL_REVW_STATUS
		, LOADED_TO_JOB
		, RES_RVW_BAND_CD
		, FINAL_RVW_BAND_CD
		, GB_GROUP_ID
		, GVT_OPM_RATING
		, FP_REV_RATING
		, LAST_UPDATE_DATE
	FROM EHRP.PS_EMPLOYEE_REVIEW@BIIS_DBLINK;

	TYPE TYP_PS_EMPL_RVW IS TABLE OF CUR_PS_EMPL_RVW%ROWTYPE
		INDEX BY PLS_INTEGER;

	TBL_PS_EMPL_RVW TYP_PS_EMPL_RVW;

--------------------------------------------------------
--CURSOR: CUR_PS_PAR_RMKS
--DESCRIPTION: Fetches records from EHRP
-- PS_GVT_PAR_REMARKS
--------------------------------------------------------
CURSOR CUR_PS_PAR_RMKS
IS
	SELECT
		EMPLID,
		, EMPL_RCD
		, EFFDT
		, EFFSEQ
		, GVT_SF50_REMARK
		, GVT_INSERT_REQD
		, GVT_REMARK_LINE1
		, GVT_REMARK_LINE2
		, GVT_REMARK_LINE3
		, GVT_REMARK_LINE4
		, GVT_REMARK_LINE5
		, GVT_REMARK_LINE6
		, GVT_REMARK_LINE7
		, GVT_REMARK_LINE8
		, GVT_REMARK_LINE9
	FROM EHRP.PS_GVT_PAR_REMARKS@BIIS_DBLINK;

	TYPE TYP_PS_PAR_RMKS IS TABLE OF CUR_PS_PAR_RMKS%ROWTYPE
		INDEX BY PLS_INTEGER;

	TBL_PS_PAR_RMKS TYP_PS_PAR_RMKS;

--======================================================
-- - - -- - - - - - - - - - - - - - - - - - - - - - - -

--PROCEDURES

-- - - - - - - - - - - - - - - - - - - - - - - - - - - -
--======================================================

---------------------------------------------------------
--PROCEDURE: LOGGER
--DESCRIPTION : Helper procedure to log bulk errors to 
--error_log table, throwun during forall bulk insert.
---------------------------------------------------------
PROCEDURE LOGGER
AS
	ERR PLS_INTEGER;
	MSG VARCHAR2(32767);
BEGIN
	FOR CODE IN 1..SQL%BULK_EXCEPTIONS.COUNT LOOP
	--LOG ERRORS TO DB
	ERR := SQL%BULK_EXCEPTIONS(CODE).ERROR_CODE;
	MSG := SQLERRM(ERR);
	SP_INTERFACE_ERROR_LOGGER(ERR,MSG);--stored procedure outside of this package to handle multiple errors
	END LOOP;
END LOGGER;

------------------------------------------------------------
--PROCEDURE: SINGLE_LOGGER
--DESCRIPTION : Logs SQL errors messages,by calling LOGGER
--helper procedure and SP_ERROR_LOG Stored procedure
------------------------------------------------------------
PROCEDURE SINGLE_LOGGER
AS
BEGIN
	IF SQLCODE = -24381 THEN -- bulk error thrown by FORALL insert
		LOGGER();
	ELSE --anything else
		SP_ERROR_LOG();
	END IF;
END SINGLE_LOGGER;

--------------------------------------------------------
--PROCEDURE: INSERT_EHRP_PS_DEPT_TBL
--DESCRIPTION : Inserts new records into 
--PS_DEPT_TBL table, from BIIS
--------------------------------------------------------
PROCEDURE INSERT_EHRP_PS_DEPT_TBL
AS
	V_CNT    NUMBER;
BEGIN
	SELECT COUNT(*)
	INTO V_CNT
	FROM EHRP.PS_DEPT_TBL@BIIS_DBLINK;

	IF V_CNT > 0 THEN
		EXECUTE IMMEDIATE 'TRUNCATE TABLE PS_DEPT_TBL';
		OPEN CUR_PS_DEPT;
		LOOP
			FETCH CUR_PS_DEPT
			BULK COLLECT INTO PS_DEPARTMENTS
			LIMIT GCV_LIMIT;
			
			FORALL i IN  PS_DEPARTMENTS.FIRST..PS_DEPARTMENTS.LAST SAVE EXCEPTIONS
				INSERT INTO PS_DEPT_TBL VALUES PS_DEPARTMENTS(i);
			COMMIT;
				
			EXIT WHEN CUR_PS_DEPT%NOTFOUND;
		END LOOP;
		CLOSE CUR_PS_DEPT;
	END IF;
	--CATCH EXCEPTIONS
EXCEPTION
	WHEN OTHERS THEN
		SINGLE_LOGGER();
END INSERT_EHRP_PS_DEPT_TBL;

---------------------------------------------------------
--PROCEDURE: INSERT_EHRP_PS_HE_RECRUIT_EWIT
--DESCRIPTION : Inserts new records into
--PS_HE_RECRUIT_EWIT table, from BIIS
---------------------------------------------------------
PROCEDURE INSERT_EHRP_PS_HE_RECRUIT_EWIT
AS
	V_CNT    NUMBER;
BEGIN
	SELECT COUNT(*)
	INTO V_CNT
	FROM EHRP.PS_HE_RECRUIT_EWIT@BIIS_DBLINK;

	IF V_CNT > 0 THEN
		EXECUTE IMMEDIATE 'TRUNCATE TABLE PS_HE_RECRUIT_EWIT';
		OPEN CUR_HE_RECRUIT;
		LOOP
			FETCH CUR_HE_RECRUIT
			BULK COLLECT INTO HE_RECRUITS
			LIMIT GCV_LIMIT;
			
			FORALL i IN  HE_RECRUITS.FIRST..HE_RECRUITS.LAST SAVE EXCEPTIONS
				INSERT INTO PS_HE_RECRUIT_EWIT VALUES HE_RECRUITS(i);
			COMMIT;
				
			EXIT WHEN CUR_HE_RECRUIT%NOTFOUND;
		END LOOP;
		CLOSE CUR_HE_RECRUIT;
	END IF;
	--CATCH EXCEPTIONS
EXCEPTION
	WHEN OTHERS THEN
		SINGLE_LOGGER();
END INSERT_EHRP_PS_HE_RECRUIT_EWIT;

-----------------------------------------------------------
--PROCEDURE: INSERT_EHRP_PS_HRS_JO_LOC
--DESCRIPTION : Inserts new records into 
--PS_HRS_JO_LOC table, from BIIS
-----------------------------------------------------------
PROCEDURE INSERT_EHRP_PS_HRS_JO_LOC
AS
	V_CNT    NUMBER;
BEGIN
	SELECT COUNT(*)
	INTO V_CNT
	FROM EHRP.PS_HRS_JO_LOC@BIIS_DBLINK;

	IF V_CNT > 0 THEN
		EXECUTE IMMEDIATE 'TRUNCATE TABLE PS_HRS_JO_LOC';
		OPEN CUR_HRS_JO_LOC;
		LOOP
			FETCH CUR_HRS_JO_LOC
			BULK COLLECT INTO HRS_JO_LOCS
			LIMIT GCV_LIMIT;
			
			FORALL i IN  HRS_JO_LOCS.FIRST..HRS_JO_LOCS.LAST SAVE EXCEPTIONS
				INSERT INTO PS_HRS_JO_LOC VALUES HRS_JO_LOCs(i);
			COMMIT;
				
			EXIT WHEN CUR_HRS_JO_LOC%NOTFOUND;
		END LOOP;
		CLOSE CUR_HRS_JO_LOC;
	END IF;
	--CATCH EXCEPTIONS
EXCEPTION
	WHEN OTHERS THEN
		SINGLE_LOGGER();
END INSERT_EHRP_PS_HRS_JO_LOC;

-----------------------------------------------------------
--PROCEDURE: INSERT_EHRP_PS_HRS_JO_NAME
--DESCRIPTION : Inserts new records into
--PS_HRS_JO_NAME table, from BIIS
-----------------------------------------------------------
PROCEDURE INSERT_EHRP_PS_HRS_JO_NAME
AS
	V_CNT    NUMBER;
BEGIN
	SELECT COUNT(*)
	INTO V_CNT
	FROM EHRP.PS_HRS_JO_NAME@BIIS_DBLINK;

	IF V_CNT > 0 THEN
		EXECUTE IMMEDIATE 'TRUNCATE TABLE PS_HRS_JO_NAME';
		OPEN CUR_HRS_JO_NAME;
		LOOP
			FETCH CUR_HRS_JO_NAME
			BULK COLLECT INTO HRS_JO_NAMES
			LIMIT GCV_LIMIT;
			
			FORALL i IN  HRS_JO_NAMES.FIRST..HRS_JO_NAMES.LAST SAVE EXCEPTIONS
				INSERT INTO PS_HRS_JO_NAME VALUES HRS_JO_NAMES(i);
			COMMIT;
				
			EXIT WHEN CUR_HRS_JO_NAME%NOTFOUND;
		END LOOP;
		CLOSE CUR_HRS_JO_NAME;
	END IF;
	--CATCH EXCEPTIONS
EXCEPTION
	WHEN OTHERS THEN
		SINGLE_LOGGER();
END INSERT_EHRP_PS_HRS_JO_NAME;

------------------------------------------------------------
--PROCEDURE: INSERT_EHRP_PS_HRS_JO_POSN
--DESCRIPTION : Inserts new records into
--HRS_JO_POSNS table, from BIIS
------------------------------------------------------------
PROCEDURE INSERT_EHRP_PS_HRS_JO_POSN
AS
	V_CNT    NUMBER;
BEGIN
	SELECT COUNT(*)
	INTO V_CNT
	FROM EHRP.PS_HRS_JO_POSN@BIIS_DBLINK;

	IF V_CNT > 0 THEN
		EXECUTE IMMEDIATE 'TRUNCATE TABLE PS_HRS_JO_POSN';
		OPEN CUR_HRS_JO_POSN;
		LOOP
			FETCH CUR_HRS_JO_POSN
			BULK COLLECT INTO HRS_JO_POSNS
			LIMIT GCV_LIMIT;
				
			FORALL i IN  HRS_JO_POSNS.FIRST..HRS_JO_POSNS.LAST SAVE EXCEPTIONS
				INSERT INTO PS_HRS_JO_POSN VALUES HRS_JO_POSNS(i);
			COMMIT;
					
			EXIT WHEN CUR_HRS_JO_POSN%NOTFOUND;
		END LOOP;
		CLOSE CUR_HRS_JO_POSN;
	END IF;
	--CATCH EXCEPTIONS
EXCEPTION
	WHEN OTHERS THEN
		SINGLE_LOGGER();
END INSERT_EHRP_PS_HRS_JO_POSN;

-----------------------------------------------------------
--PROCEDURE: INSERT_EHRP_PS_HRS_JO_RPL
--DESCRIPTION : Inserts new records into
--PS_HRS_JO_RPL table, from BIIS
-----------------------------------------------------------
PROCEDURE INSERT_EHRP_PS_HRS_JO_RPL
AS
	V_CNT    NUMBER;
BEGIN
	SELECT COUNT(*)
	INTO V_CNT
	FROM EHRP.PS_HRS_JO_RPL@BIIS_DBLINK;

	IF V_CNT > 0 THEN
		EXECUTE IMMEDIATE 'TRUNCATE TABLE PS_HRS_JO_RPL';
		OPEN CUR_HRS_JO_RPL;
		LOOP
			FETCH CUR_HRS_JO_RPL
			BULK COLLECT INTO HRS_JO_RPLS
			LIMIT GCV_LIMIT;
				
			FORALL i IN  HRS_JO_RPLS.FIRST..HRS_JO_RPLS.LAST SAVE EXCEPTIONS
				INSERT INTO PS_HRS_JO_RPL VALUES HRS_JO_RPLS(i);
			COMMIT;
					
			EXIT WHEN CUR_HRS_JO_RPL%NOTFOUND;
		END LOOP;
		CLOSE CUR_HRS_JO_RPL;
	END IF;
	--CATCH EXCEPTIONS
EXCEPTION
	WHEN OTHERS THEN
		SINGLE_LOGGER();
END INSERT_EHRP_PS_HRS_JO_RPL;

-------------------------------------------------------------
--PROCEDURE: INSERT_EHRP_PS_HRS_JO_RQMT
--DESCRIPTION : Inserts new records into
--PS_HRS_JO_RQMT table, from BIIS
-------------------------------------------------------------
PROCEDURE INSERT_EHRP_PS_HRS_JO_RQMT
AS
	V_CNT    NUMBER;
BEGIN
	SELECT COUNT(*)
	INTO V_CNT
	FROM EHRP.PS_HRS_JO_RQMT@BIIS_DBLINK;

	IF V_CNT > 0 THEN
		EXECUTE IMMEDIATE 'TRUNCATE TABLE PS_HRS_JO_RQMT';
		OPEN CUR_HRS_JO_RQMT;
		LOOP
			FETCH CUR_HRS_JO_RQMT
			BULK COLLECT INTO HRS_JO_RQMTS
			LIMIT GCV_LIMIT;
			
			FORALL i IN  HRS_JO_RQMTS.FIRST..HRS_JO_RQMTS.LAST SAVE EXCEPTIONS
				INSERT INTO PS_HRS_JO_RQMT VALUES HRS_JO_RQMTS(i);
			COMMIT;
			
			EXIT WHEN CUR_HRS_JO_RQMT%NOTFOUND;
		END LOOP;
		CLOSE CUR_HRS_JO_RQMT;
	END IF;
	--CATCH EXCEPTIONS
EXCEPTION
	WHEN OTHERS THEN
		SINGLE_LOGGER();
END INSERT_EHRP_PS_HRS_JO_RQMT;

--------------------------------------------------------------
--PROCEDURE: INSERT_EHRP_PS_HRS_JOB_OPENING
--DESCRIPTION : Inserts new records into
--PS_HRS_JOB_OPENING table, from BIIS
--------------------------------------------------------------
PROCEDURE INSERT_EHRP_PS_HRS_JOB_OPENING
AS
	V_CNT    NUMBER;
BEGIN
	SELECT COUNT(*)
	INTO V_CNT
	FROM EHRP.PS_HRS_JOB_OPENING@BIIS_DBLINK;

	IF V_CNT > 0 THEN
		EXECUTE IMMEDIATE 'TRUNCATE TABLE PS_HRS_JOB_OPENING';
		OPEN CUR_HRS_JOB_OPENING;
		LOOP
			FETCH CUR_HRS_JOB_OPENING
			BULK COLLECT INTO HRS_JOB_OPENINGS
			LIMIT GCV_LIMIT;
			
			FORALL i IN  HRS_JOB_OPENINGS.FIRST..HRS_JOB_OPENINGS.LAST SAVE EXCEPTIONS
				INSERT INTO PS_HRS_JOB_OPENING VALUES HRS_JOB_OPENINGS(i);
			COMMIT;
			
			EXIT WHEN CUR_HRS_JOB_OPENING%NOTFOUND;
		END LOOP;
		CLOSE CUR_HRS_JOB_OPENING;
	END IF;
	--CATCH EXCEPTIONS
EXCEPTION
	WHEN OTHERS THEN
		SINGLE_LOGGER();
END INSERT_EHRP_PS_HRS_JOB_OPENING;

---------------------------------------------------------------
--PROCEDURE: INSERT_EHRP_PS_JOBCODE_TBL
--DESCRIPTION : Inserts new records into
--PS_JOBCODE_TBL table, from BIIS
---------------------------------------------------------------
PROCEDURE INSERT_EHRP_PS_JOBCODE_TBL
AS
	V_CNT    NUMBER;
BEGIN
	SELECT COUNT(*)
	INTO V_CNT
	FROM EHRP.PS_JOBCODE_TBL@BIIS_DBLINK;

	IF V_CNT > 0 THEN
		EXECUTE IMMEDIATE 'TRUNCATE TABLE PS_JOBCODE_TBL';
		OPEN CUR_PS_JOBCODE;
		LOOP
			FETCH CUR_PS_JOBCODE
			BULK COLLECT INTO PS_JOBCODES
			LIMIT GCV_LIMIT;
			
			FORALL i IN  PS_JOBCODES.FIRST..PS_JOBCODES.LAST SAVE EXCEPTIONS
				INSERT INTO PS_JOBCODE_TBL VALUES PS_JOBCODES(i);
			COMMIT;
			
			EXIT WHEN CUR_PS_JOBCODE%NOTFOUND;
		END LOOP;
		CLOSE CUR_PS_JOBCODE;
	END IF;
	--CATCH EXCEPTIONS
EXCEPTION
	WHEN OTHERS THEN
		SINGLE_LOGGER();
END INSERT_EHRP_PS_JOBCODE_TBL;

---------------------------------------------------------------
--PROCEDURE: INSERT_EHRP_PS_POSITION_DATA
--DESCRIPTION : Inserts new records into
--PS_POSITION_DATA table, from BIIS
---------------------------------------------------------------
PROCEDURE INSERT_EHRP_PS_POSITION_DATA
AS
	V_CNT    NUMBER;
BEGIN
	SELECT COUNT(*)
	INTO V_CNT
	FROM EHRP.PS_POSITION_DATA@BIIS_DBLINK;

	IF V_CNT > 0 THEN
		EXECUTE IMMEDIATE 'TRUNCATE TABLE PS_POSITION_DATA';
		OPEN CUR_PS_POSITION_DATA;
		LOOP
			FETCH CUR_PS_POSITION_DATA
			BULK COLLECT INTO PS_POSITIONS
			LIMIT GCV_LIMIT;
			
			FORALL i IN PS_POSITIONS.FIRST..PS_POSITIONS.LAST SAVE EXCEPTIONS
				INSERT INTO PS_POSITION_DATA VALUES PS_POSITIONS(i);
				COMMIT;
				
			EXIT WHEN CUR_PS_POSITION_DATA%NOTFOUND;
		END LOOP;
		CLOSE CUR_PS_POSITION_DATA;
	END IF;
	--CATCH EXCEPTIONS
EXCEPTION
	WHEN OTHERS THEN
		SINGLE_LOGGER();
END INSERT_EHRP_PS_POSITION_DATA;

-------------------------------------------------------------
--PROCEDURE: INSERT_EHRP_PS_SAL_GRADE_TBL
--DESCRIPTION : Inserts new records into
--PS_SAL_GRADE_TBL table, from BIIS
-------------------------------------------------------------
PROCEDURE INSERT_EHRP_PS_SAL_GRADE_TBL
AS
	V_CNT    NUMBER;
BEGIN
	SELECT COUNT(*)
	INTO V_CNT
	FROM EHRP.PS_SAL_GRADE_TBL@BIIS_DBLINK;

	IF V_CNT > 0 THEN
		EXECUTE IMMEDIATE 'TRUNCATE TABLE PS_SAL_GRADE_TBL';
		OPEN CUR_PS_SAL_GRADE;
		LOOP
			FETCH CUR_PS_SAL_GRADE
			BULK COLLECT INTO PS_SAL_GRADES
			LIMIT GCV_LIMIT;
			
			FORALL i IN  PS_SAL_GRADES.FIRST..PS_SAL_GRADES.LAST SAVE EXCEPTIONS
				INSERT INTO PS_SAL_GRADE_TBL VALUES PS_SAL_GRADES(i);
			COMMIT;
				
			EXIT WHEN CUR_PS_SAL_GRADE%NOTFOUND;
		END LOOP;
		CLOSE CUR_PS_SAL_GRADE;
	END IF;
	--CATCH EXCEPTIONS
EXCEPTION
	WHEN OTHERS THEN
		SINGLE_LOGGER();
END INSERT_EHRP_PS_SAL_GRADE_TBL;

-------------------------------------------------------------
--PROCEDURE: INSERT_EHRP_PS_HRS_LOC
--DESCRIPTION : Inserts new records into
-- PS_HRS_LOCATION_I table, from BIIS
-------------------------------------------------------------
PROCEDURE INSERT_EHRP_PS_HRS_LOC
AS
	V_CNT    NUMBER;
BEGIN
	SELECT COUNT(*)
	INTO V_CNT
	FROM EHRP.PS_HRS_LOCATION_I@BIIS_DBLINK;

	IF V_CNT > 0 THEN
		EXECUTE IMMEDIATE 'TRUNCATE TABLE PS_HRS_LOCATION_I';
		OPEN CUR_PS_HRS_LOC;
		LOOP
			FETCH CUR_PS_HRS_LOC
			BULK COLLECT INTO PS_HRS_LOC
			LIMIT GCV_LIMIT;
			
			FORALL i IN  PS_HRS_LOC.FIRST..PS_HRS_LOC.LAST SAVE EXCEPTIONS
				INSERT INTO PS_HRS_LOCATION_I VALUES PS_HRS_LOC(i);
			COMMIT;
				
			EXIT WHEN CUR_PS_HRS_LOC%NOTFOUND;
		END LOOP;
		CLOSE CUR_PS_HRS_LOC;
	END IF;
	--CATCH EXCEPTIONS
EXCEPTION
	WHEN OTHERS THEN
		SINGLE_LOGGER();
END INSERT_EHRP_PS_HRS_LOC;

-------------------------------------------------------------
--PROCEDURE: INSERT_EHRP_PS_PERSONAL_VW
--DESCRIPTION : Inserts new records into
-- PS_PERSONAL_DATA_VW table, from BIIS
-------------------------------------------------------------
PROCEDURE INSERT_EHRP_PS_PERSONAL_VW
AS
	V_CNT    NUMBER;
BEGIN
	SELECT COUNT(*)
	INTO V_CNT
	FROM EHRP.PS_PERSONAL_DATA_VW@BIIS_DBLINK;

	IF V_CNT > 0 THEN
		EXECUTE IMMEDIATE 'TRUNCATE TABLE PS_PERSONAL_DATA_VW';
		OPEN CUR_PERSONAL_VW;
		LOOP
			FETCH CUR_PERSONAL_VW
			BULK COLLECT INTO PS_PERS_VW
			LIMIT GCV_LIMIT;
			
			FORALL i IN  PS_PERS_VW.FIRST..PS_PERS_VW.LAST SAVE EXCEPTIONS
				INSERT INTO PS_PERSONAL_DATA_VW VALUES PS_PERS_VW(i);
			COMMIT;
				
			EXIT WHEN CUR_PERSONAL_VW%NOTFOUND;
		END LOOP;
		CLOSE CUR_PERSONAL_VW;
	END IF;
	--CATCH EXCEPTIONS
EXCEPTION
	WHEN OTHERS THEN
		SINGLE_LOGGER();
END INSERT_EHRP_PS_PERSONAL_VW;

-------------------------------------------------------------
--PROCEDURE: INSERT_EHRP_PS_GVT_RQSN_JOBCD
--DESCRIPTION : Inserts new records into
-- PS_GVT_RQSN_JOBCD table, from BIIS
-------------------------------------------------------------
PROCEDURE INSERT_EHRP_PS_GVT_RQSN_JOBCD
AS
	V_CNT    NUMBER;
BEGIN
	SELECT COUNT(*)
	INTO V_CNT
	FROM EHRP.PS_GVT_RQSN_JOBCD@BIIS_DBLINK;

	IF V_CNT > 0 THEN
		EXECUTE IMMEDIATE 'TRUNCATE TABLE PS_GVT_RQSN_JOBCD';
		OPEN CUR_GVT_RQSN_JOBCD;
		LOOP
			FETCH CUR_GVT_RQSN_JOBCD
			BULK COLLECT INTO TBL_GVT_RQ_JC
			LIMIT GCV_LIMIT;
			
			FORALL i IN  TBL_GVT_RQ_JC.FIRST..TBL_GVT_RQ_JC.LAST SAVE EXCEPTIONS
				INSERT INTO PS_GVT_RQSN_JOBCD VALUES TBL_GVT_RQ_JC(i);
			COMMIT;
				
			EXIT WHEN CUR_GVT_RQSN_JOBCD%NOTFOUND;
		END LOOP;
		CLOSE CUR_GVT_RQSN_JOBCD;
	END IF;
	--CATCH EXCEPTIONS
EXCEPTION
	WHEN OTHERS THEN
		SINGLE_LOGGER();
END INSERT_EHRP_PS_GVT_RQSN_JOBCD;

-------------------------------------------------------------
--PROCEDURE: INSERT_EHRP_PS_GVT_RQSN_POSN
--DESCRIPTION : Inserts new records into
-- PS_GVT_RQSN_POSN table, from BIIS
-------------------------------------------------------------
PROCEDURE INSERT_EHRP_PS_GVT_RQSN_POSN
AS
	V_CNT    NUMBER;
BEGIN
	SELECT COUNT(*)
	INTO V_CNT
	FROM EHRP.PS_GVT_RQSN_POSN@BIIS_DBLINK;

	IF V_CNT > 0 THEN
		EXECUTE IMMEDIATE 'TRUNCATE TABLE PS_GVT_RQSN_POSN';
		OPEN CUR_GVT_RQSN_POSN;
		LOOP
			FETCH CUR_GVT_RQSN_POSN
			BULK COLLECT INTO TBL_GVT_RQ_POS
			LIMIT GCV_LIMIT;
			
			FORALL i IN  TBL_GVT_RQ_POS.FIRST..TBL_GVT_RQ_POS.LAST SAVE EXCEPTIONS
				INSERT INTO PS_GVT_RQSN_POSN VALUES TBL_GVT_RQ_POS(i);
			COMMIT;
				
			EXIT WHEN CUR_GVT_RQSN_POSN%NOTFOUND;
		END LOOP;
		CLOSE CUR_GVT_RQSN_POSN;
	END IF;
	--CATCH EXCEPTIONS
EXCEPTION
	WHEN OTHERS THEN
		SINGLE_LOGGER();
END INSERT_EHRP_PS_GVT_RQSN_POSN;

-------------------------------------------------------------
--PROCEDURE: INSERT_EHRP_PS_HE_GVT_RQSN_PRT
--DESCRIPTION : Inserts new records into
-- PS_HE_GVT_RQSN_PRT table, from BIIS
-------------------------------------------------------------
PROCEDURE INSERT_EHRP_PS_HE_GVT_RQSN_PRT
AS
	V_CNT    NUMBER;
BEGIN
	SELECT COUNT(*)
	INTO V_CNT
	FROM EHRP.PS_HE_GVT_RQSN_PRT@BIIS_DBLINK;

	IF V_CNT > 0 THEN
		EXECUTE IMMEDIATE 'TRUNCATE TABLE PS_HE_GVT_RQSN_PRT';
		OPEN CUR_HE_GVT_RQSN_PRT;
		LOOP
			FETCH CUR_HE_GVT_RQSN_PRT
			BULK COLLECT INTO TBL_HE_GVT_RQ_PRT
			LIMIT GCV_LIMIT;
			
			FORALL i IN  TBL_HE_GVT_RQ_PRT.FIRST..TBL_HE_GVT_RQ_PRT.LAST SAVE EXCEPTIONS
				INSERT INTO PS_HE_GVT_RQSN_PRT VALUES TBL_HE_GVT_RQ_PRT(i);
			COMMIT;
				
			EXIT WHEN CUR_HE_GVT_RQSN_PRT%NOTFOUND;
		END LOOP;
		CLOSE CUR_HE_GVT_RQSN_PRT;
	END IF;
	--CATCH EXCEPTIONS
EXCEPTION
	WHEN OTHERS THEN
		SINGLE_LOGGER();
END INSERT_EHRP_PS_HE_GVT_RQSN_PRT;

-------------------------------------------------------------
--PROCEDURE: INSERT_EHRP_PS_HE_JO_APPR_COMM
--DESCRIPTION : Inserts new records into
-- PS_HE_JO_APPR_COMM table, from BIIS
-------------------------------------------------------------
PROCEDURE INSERT_EHRP_PS_HE_JO_APPR_COMM
AS
	V_CNT    NUMBER;
BEGIN
	SELECT COUNT(*)
	INTO V_CNT
	FROM EHRP.PS_HE_JO_APPR_COMM@BIIS_DBLINK;

	IF V_CNT > 0 THEN
		EXECUTE IMMEDIATE 'TRUNCATE TABLE PS_HE_JO_APPR_COMM';
		OPEN CUR_JO_APPR_COMM;
		LOOP
			FETCH CUR_JO_APPR_COMM
			BULK COLLECT INTO TBL_JO_APPR_COMM
			LIMIT GCV_LIMIT;
			
			FORALL i IN  TBL_JO_APPR_COMM.FIRST..TBL_JO_APPR_COMM.LAST SAVE EXCEPTIONS
				INSERT INTO PS_HE_JO_APPR_COMM VALUES TBL_JO_APPR_COMM(i);
			COMMIT;
				
			EXIT WHEN CUR_JO_APPR_COMM%NOTFOUND;
		END LOOP;
		CLOSE CUR_JO_APPR_COMM;
	END IF;
	--CATCH EXCEPTIONS
EXCEPTION
	WHEN OTHERS THEN
		SINGLE_LOGGER();
END INSERT_EHRP_PS_HE_JO_APPR_COMM;

-------------------------------------------------------------
--PROCEDURE: INSERT_EHRP_PS_OPR_DEFN
--DESCRIPTION : Inserts new records into
-- PS_OPR_DEFN table
-------------------------------------------------------------
PROCEDURE INSERT_EHRP_PS_OPR_DEFN
AS
	V_CNT    NUMBER;
BEGIN
	SELECT COUNT(*)
	INTO V_CNT
	FROM EHRP.PS_OPR_DEFN@BIIS_DBLINK;
	
	IF V_CNT > 0 THEN
		EXECUTE IMMEDIATE 'TRUNCATE TABLE PS_OPR_DEFN';
		OPEN CUR_OPR_DEFN;
		LOOP
			FETCH CUR_OPR_DEFN
			BULK COLLECT INTO TBL_OPR_DEFN
			LIMIT GCV_LIMIT;
			
			FORALL i IN  TBL_OPR_DEFN.FIRST..TBL_OPR_DEFN.LAST SAVE EXCEPTIONS
				INSERT INTO PS_OPR_DEFN VALUES TBL_OPR_DEFN(i);
			COMMIT;
				
			EXIT WHEN CUR_OPR_DEFN%NOTFOUND;
		END LOOP;
		CLOSE CUR_OPR_DEFN;
	END IF;
	--CATCH EXCEPTIONS
EXCEPTION
	WHEN OTHERS THEN
		SINGLE_LOGGER();
END INSERT_EHRP_PS_OPR_DEFN;

-------------------------------------------------------------
--PROCEDURE: INSERT_EHRP_PS_GVT_EMPL
--DESCRIPTION : Inserts new records into
-- PS_GVT_EMPLOYMENT table
-------------------------------------------------------------
PROCEDURE INSERT_EHRP_PS_GVT_EMPL
AS
	V_CNT    NUMBER;
BEGIN
	SELECT COUNT(*)
	INTO V_CNT
	FROM EHRP.PS_GVT_EMPLOYMENT@BIIS_DBLINK;

	IF V_CNT > 0 THEN
		EXECUTE IMMEDIATE 'TRUNCATE TABLE PS_GVT_EMPLOYMENT';
		OPEN CUR_PS_GVT_EMPL;
		LOOP
			FETCH CUR_PS_GVT_EMPL
			BULK COLLECT INTO TBL_PS_GVT_EMPL
			LIMIT GCV_LIMIT;
			
			FORALL i IN  TBL_PS_GVT_EMPL.FIRST..TBL_PS_GVT_EMPL.LAST SAVE EXCEPTIONS
				INSERT INTO PS_GVT_EMPLOYMENT VALUES TBL_PS_GVT_EMPL(i);
			COMMIT;
				
			EXIT WHEN CUR_PS_GVT_EMPL%NOTFOUND;
		END LOOP;
		CLOSE CUR_PS_GVT_EMPL;
	END IF;
	--CATCH EXCEPTIONS
EXCEPTION
	WHEN OTHERS THEN
		SINGLE_LOGGER();
END INSERT_EHRP_PS_GVT_EMPL;

-------------------------------------------------------------
--PROCEDURE: INSERT_EHRP_PS_GVT_JOB
--DESCRIPTION : Inserts new records into
-- PS_GVT_JOB table
-------------------------------------------------------------
PROCEDURE INSERT_EHRP_PS_GVT_JOB
AS
	V_CNT    NUMBER;
BEGIN
	SELECT COUNT(*)
	INTO V_CNT
	FROM EHRP.PS_GVT_JOB@BIIS_DBLINK;
	
	IF V_CNT > 0 THEN
		EXECUTE IMMEDIATE 'TRUNCATE TABLE PS_GVT_JOB';
		OPEN CUR_PS_GVT_JOB;
		LOOP
			FETCH CUR_PS_GVT_JOB
			BULK COLLECT INTO TBL_PS_GVT_JOB
			LIMIT GCV_LIMIT;
			
			FORALL i IN  TBL_PS_GVT_JOB.FIRST..TBL_PS_GVT_JOB.LAST SAVE EXCEPTIONS
				INSERT INTO PS_GVT_JOB VALUES TBL_PS_GVT_JOB(i);
			COMMIT;
				
			EXIT WHEN CUR_PS_GVT_JOB%NOTFOUND;
		END LOOP;
		CLOSE CUR_PS_GVT_JOB;
	END IF;
	--CATCH EXCEPTIONS
EXCEPTION
	WHEN OTHERS THEN
		SINGLE_LOGGER();
END INSERT_EHRP_PS_GVT_JOB;

-------------------------------------------------------------
--PROCEDURE: INSERT_EHRP_PS_EMPL_RVW
--DESCRIPTION : Inserts new records into
-- PS_EMPLOYEE_REVIEW table
-------------------------------------------------------------
PROCEDURE INSERT_EHRP_PS_EMPL_RVW
AS
	V_CNT    NUMBER;
BEGIN
	SELECT COUNT(*)
	INTO V_CNT
	FROM EHRP.PS_EMPLOYEE_REVIEW@BIIS_DBLINK;

	IF V_CNT > 0 THEN
		EXECUTE IMMEDIATE 'TRUNCATE TABLE PS_EMPLOYEE_REVIEW';
		OPEN CUR_PS_EMPL_RVW;
		LOOP
			FETCH CUR_PS_EMPL_RVW
			BULK COLLECT INTO TBL_PS_EMPL_RVW
			LIMIT GCV_LIMIT;
			
			FORALL i IN  TBL_PS_EMPL_RVW.FIRST..TBL_PS_EMPL_RVW.LAST SAVE EXCEPTIONS
				INSERT INTO PS_EMPLOYEE_REVIEW VALUES TBL_PS_EMPL_RVW(i);
			COMMIT;
				
			EXIT WHEN CUR_PS_EMPL_RVW%NOTFOUND;
		END LOOP;
		CLOSE CUR_PS_EMPL_RVW;
	END IF;
	--CATCH EXCEPTIONS
EXCEPTION
	WHEN OTHERS THEN
		SINGLE_LOGGER();
END INSERT_EHRP_PS_EMPL_RVW;

-------------------------------------------------------------
--PROCEDURE: INSERT_EHRP_PS_PAR_RMKS
--DESCRIPTION : Inserts new records into
-- PS_GVT_PAR_REMARKS table
-------------------------------------------------------------
PROCEDURE INSERT_EHRP_PS_PAR_RMKS
AS
	V_CNT    NUMBER;
BEGIN
	SELECT COUNT(*)
	INTO V_CNT
	FROM EHRP.PS_GVT_PAR_REMARKS@BIIS_DBLINK;

	IF V_CNT > 0 THEN
		EXECUTE IMMEDIATE 'TRUNCATE TABLE PS_GVT_PAR_REMARKS';
		OPEN CUR_;
		LOOP
			FETCH CUR_PS_PAR_RMKS
			BULK COLLECT INTO TBL_PS_PAR_RMKS
			LIMIT GCV_LIMIT;
			
			FORALL i IN  TBL_PS_PAR_RMKS.FIRST..TBL_PS_PAR_RMKS.LAST SAVE EXCEPTIONS
				INSERT INTO PS_GVT_PAR_REMARKS VALUES TBL_PS_PAR_RMKS(i);
			COMMIT;
				
			EXIT WHEN CUR_PS_PAR_RMKS%NOTFOUND;
		END LOOP;
		CLOSE CUR_PS_PAR_RMKS;
	END IF;
	--CATCH EXCEPTIONS
EXCEPTION
	WHEN OTHERS THEN
		SINGLE_LOGGER();
END INSERT_EHRP_PS_PAR_RMKS;

----------------------------------------------------------------
--PROCEDURE: FN_IMPORT_EHRP_REF_DATA
--DESCRIPTION : Entry point for this package,calls individual 
--procedure run INSERT scrip inside the procedure. It will
-- return and error code and message if any.
----------------------------------------------------------------
FUNCTION FN_IMPORT_EHRP_REF_DATA
RETURN VARCHAR2
AS
BEGIN
	INSERT_EHRP_PS_DEPT_TBL();
	INSERT_EHRP_PS_HE_RECRUIT_EWIT();
	INSERT_EHRP_PS_HRS_JO_LOC();
	INSERT_EHRP_PS_HRS_JO_NAME();
	INSERT_EHRP_PS_HRS_JO_POSN();
	INSERT_EHRP_PS_HRS_JO_RPL();
	INSERT_EHRP_PS_HRS_JO_RQMT();
	INSERT_EHRP_PS_HRS_JOB_OPENING();
	INSERT_EHRP_PS_JOBCODE_TBL();
	INSERT_EHRP_PS_POSITION_DATA();
	INSERT_EHRP_PS_SAL_GRADE_TBL();
	INSERT_EHRP_PS_HRS_LOC();
	INSERT_EHRP_PS_PERSONAL_VW();
	INSERT_EHRP_PS_GVT_RQSN_JOBCD();
	INSERT_EHRP_PS_GVT_RQSN_POSN();
	INSERT_EHRP_PS_HE_GVT_RQSN_PRT();
	INSERT_EHRP_PS_HE_JO_APPR_COMM();
	INSERT_EHRP_PS_OPR_DEFN();
	INSERT_EHRP_PS_GVT_EMPL();
	INSERT_EHRP_PS_GVT_JOB();
	INSERT_EHRP_PS_EMPL_RVW();
	INSERT_EHRP_PS_PAR_RMKS();
RETURN ERROR_LOG();
END FN_IMPORT_EHRP_REF_DATA;

--------------------------------------------------------
--PROCEDURE: ERROR_LOG
--DESCRIPTION: Return SQLCODE and SQLERRM
--------------------------------------------------------
FUNCTION ERROR_LOG
RETURN VARCHAR2
IS
	ERR_CODE   PLS_INTEGER        :=SQLCODE;
	ERR_MSG    VARCHAR2(32767)    := SQLERRM;
BEGIN
	RETURN ERR_CODE ||' : ' ||ERR_MSG;
END ERROR_LOG;

END EHRP_REF_DATA_PKS;
/
